{"version":3,"sources":["colors.js","Tower.jsx","App.jsx","index.js"],"names":["colors","Tower","idx","discStack","onClick","selected","dWidth","discNos","className","viewBox","width","x","y","height","fillOpacity","map","disc","length","dHeight","fill","App","useState","setDiscNos","Array","keys","discStacks","setDiscStacks","currentSelected","setCurrentSelected","checkCompleted","useCallback","useEffect","type","onChange","e","newDiscNo","parseInt","target","value","min","newSelected","newDiscStacks","discToMove","shift","unshift","moveDisc","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAmBeA,G,MAnBA,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,Y,OCqCWC,MAhDf,YAA+D,EAA9CC,IAA+C,IAA1CC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,SAEhCC,EAJS,GAE4C,EAAXC,QAGhD,OACI,sBACIC,UAAS,gBAAWH,EAAW,WAAa,IAC5CD,QAASA,EAFb,UAIKC,EACD,sBAAKI,QAAQ,cAAcC,MAAM,MAAjC,UACI,8BACI,sBACIC,EAAG,EACHC,EAAG,IACHF,MAAO,IACPG,OAAQ,GACRC,YAAa,KAEjB,sBACIH,EAAG,GACHC,EAAG,GACHF,MAAO,GACPG,OAAQ,IACRC,YAAa,QAGrB,4BACKX,EAAUY,KAAI,SAACC,EAAMd,GAAP,OACX,sBAEIS,EAAG,IAAML,EAASA,EAASU,EAC3BJ,EACI,IAjCZ,IAkCaT,EAAUc,OAASf,GACpBgB,IAEJL,OAAQK,GACRR,MAAkC,GAA1BJ,EAASA,EAASU,GAC1BG,KAAMnB,EAAOgB,IAVjB,eACiBA,gBCqD1BI,MApFf,WACI,MAA8BC,mBAAS,GAAvC,mBAAOd,EAAP,KAAgBe,EAAhB,KACA,EAAoCD,mBAAS,CAAC,YACtCE,MAAMhB,GAASiB,QACnB,GACA,KAHJ,mBAAOC,EAAP,KAAmBC,EAAnB,KAKA,EAA8CL,mBAAS,MAAvD,mBAAOM,EAAP,KAAwBC,EAAxB,KAEMC,EAAiBC,uBAAY,cAEhC,IA0CH,OAxCAC,qBAAU,WACNF,MACD,CAACJ,EAAYI,IAuCZ,gCACI,uBACIG,KAAK,SACLC,SAAU,SAACC,GACP,IAAMC,EAAYC,SAASF,EAAEG,OAAOC,OACpChB,EAAWa,GACXT,EAAc,CAAC,YAAIH,MAAMY,GAAWX,QAAS,GAAI,MAErDc,MAAO/B,EACPgC,IAAK,IATb,mBAWqBhC,EACjB,qBAAKC,UAAU,YAAf,SACKiB,EAAWV,KAAI,SAACZ,EAAWD,GAAZ,OACZ,cAAC,EAAD,CAEIA,IAAKA,EACLC,UAAWA,EACXC,QAAS,WAvDV,IAACoC,IAwDetC,GAvDP,OAApByB,EACuC,IAAnCF,EAAWe,GAAavB,OAI5BU,IAAoBa,GAGe,IAAnCf,EAAWe,GAAavB,QACxBQ,EAAWE,GAAiB,GAAKF,EAAWe,GAAa,KAOhD,SAACA,GACd,GAAuB,MAAnBb,EAIJ,GAAIA,IAAoBa,EAAxB,CAIA,IAAMC,EAAa,YACZhB,EAAWV,KAAI,SAACZ,GAAD,mBAAmBA,OAGnCuC,EAAaD,EAAcd,GAAiBgB,QAClDF,EAAcD,GAAaI,QAAQF,GACnChB,EAAce,GACdb,EAAmB,WAVfA,EAAmB,WAJnBA,EAAmBY,GAqCgBK,CAAS3C,IAEhCG,SAAUsB,IAAoBzB,EAC9BK,QAASA,GARb,gBACkBL,aCnEtC4C,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.65eb9e1b.chunk.js","sourcesContent":["const colors = [\r\n    \"#FFB6B9\",\r\n    \"#FAE3D9\",\r\n    \"#BBDED6\",\r\n    \"#61C0BF\",\r\n    \"#FFB6B9\",\r\n    \"#FAE3D9\",\r\n    \"#BBDED6\",\r\n    \"#61C0BF\",\r\n    \"#FFB6B9\",\r\n    \"#FAE3D9\",\r\n    \"#BBDED6\",\r\n    \"#61C0BF\",\r\n    \"#FFB6B9\",\r\n    \"#FAE3D9\",\r\n    \"#BBDED6\",\r\n    \"#61C0BF\",\r\n];\r\n\r\nexport default colors;\r\n","import React from \"react\";\r\nimport colors from \"./colors\";\r\n\r\nconst DISC_WIDTH = 90;\r\nconst DISC_HEIGHT = 15;\r\nfunction Tower({ idx, discStack, onClick, selected, discNos }) {\r\n    const dHeight = DISC_HEIGHT; /// discNos;\r\n    const dWidth = DISC_WIDTH / discNos;\r\n    return (\r\n        <div\r\n            className={`tower ${selected ? \"selected\" : \"\"}`}\r\n            onClick={onClick}\r\n        >\r\n            {selected}\r\n            <svg viewBox=\"0 0 200 300\" width=\"400\">\r\n                <g>\r\n                    <rect\r\n                        x={0}\r\n                        y={290}\r\n                        width={200}\r\n                        height={10}\r\n                        fillOpacity={0.8}\r\n                    />\r\n                    <rect\r\n                        x={95}\r\n                        y={50}\r\n                        width={10}\r\n                        height={240}\r\n                        fillOpacity={0.8}\r\n                    />\r\n                </g>\r\n                <g>\r\n                    {discStack.map((disc, idx) => (\r\n                        <rect\r\n                            key={`disc-${disc}`}\r\n                            x={100 - dWidth - dWidth * disc}\r\n                            y={\r\n                                298 -\r\n                                (discStack.length - idx) * dHeight -\r\n                                dHeight / 2\r\n                            }\r\n                            height={dHeight - 1}\r\n                            width={(dWidth + dWidth * disc) * 2}\r\n                            fill={colors[disc]}\r\n                            // fillOpacity={0.9}\r\n                        />\r\n                    ))}\r\n                </g>\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tower;\r\n","import { useState, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport Tower from \"./Tower\";\nfunction App() {\n    const [discNos, setDiscNos] = useState(3);\n    const [discStacks, setDiscStacks] = useState([\n        [...Array(discNos).keys()],\n        [],\n        [],\n    ]);\n    const [currentSelected, setCurrentSelected] = useState(null);\n\n    const checkCompleted = useCallback(() => {\n        // console.log(\"Checking for Win\");\n    }, []);\n\n    useEffect(() => {\n        checkCompleted();\n    }, [discStacks, checkCompleted]);\n\n    const checkValid = (newSelected) => {\n        if (currentSelected === null) {\n            if (discStacks[newSelected].length === 0) return false;\n            return true;\n        }\n\n        if (currentSelected === newSelected) return true;\n\n        if (\n            discStacks[newSelected].length === 0 ||\n            discStacks[currentSelected][0] < discStacks[newSelected][0]\n        )\n            return true;\n\n        return false;\n    };\n\n    const moveDisc = (newSelected) => {\n        if (currentSelected == null) {\n            setCurrentSelected(newSelected);\n            return;\n        }\n        if (currentSelected === newSelected) {\n            setCurrentSelected(null);\n            return;\n        }\n        const newDiscStacks = [\n            ...discStacks.map((discStack) => [...discStack]),\n        ];\n\n        const discToMove = newDiscStacks[currentSelected].shift();\n        newDiscStacks[newSelected].unshift(discToMove);\n        setDiscStacks(newDiscStacks);\n        setCurrentSelected(null);\n    };\n\n    return (\n        <div>\n            <input\n                type=\"number\"\n                onChange={(e) => {\n                    const newDiscNo = parseInt(e.target.value);\n                    setDiscNos(newDiscNo);\n                    setDiscStacks([[...Array(newDiscNo).keys()], [], []]);\n                }}\n                value={discNos}\n                min={1}\n            />\n            Current Discs : {discNos}\n            <div className=\"container\">\n                {discStacks.map((discStack, idx) => (\n                    <Tower\n                        key={`stack-${idx}`}\n                        idx={idx}\n                        discStack={discStack}\n                        onClick={() => {\n                            checkValid(idx) && moveDisc(idx);\n                        }}\n                        selected={currentSelected === idx}\n                        discNos={discNos}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}